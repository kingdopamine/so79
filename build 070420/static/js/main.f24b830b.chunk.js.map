{"version":3,"sources":["cardholderyellow.jpg","Tee Black.jpg","DirtyCheeks.jpg","so79logo.jpg","fulllogoinvert.jpg","HomeNav/NavLink/NavLink.js","HomeNav/HomeNav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavLink","id","class","src","this","props","img","alt","React","Component","HomeNav","state","navimages","img1","img2","img3","img4","animation","anim1","anim2","anim3","anim4","App","className","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,yNCuB5BC,G,mLAbP,OACI,yBAAKC,GAAG,aACJ,yBAAKC,MAAM,aACP,yBAAKD,GAAG,WAER,yBAAKE,IAAKC,KAAKC,MAAMC,IAAKL,GAAG,SAASM,IAAI,0B,GAXxCC,IAAMC,Y,iECmCbC,E,kDA9BX,WAAYL,GAAO,IAAD,8BACd,cAAMA,IACDM,MAAQ,CACTC,UAAY,CACRC,KAAKA,IACLC,KAAKA,IACLC,KAAKA,IACLC,KAAKA,KAETC,UAAU,CACNC,MAAM,QACNC,MAAM,QACNC,MAAM,QACNC,MAAM,UAbA,E,qDAmBd,OACI,yBAAKpB,GAAG,sBACJ,kBAAC,EAAD,CAASK,IAAKF,KAAKO,MAAMC,UAAUC,KAAMI,UAAWb,KAAKO,MAAMM,UAAUC,QACzE,kBAAC,EAAD,CAASZ,IAAKF,KAAKO,MAAMC,UAAUE,KAAMG,UAAWb,KAAKO,MAAMM,UAAUE,QACzE,kBAAC,EAAD,CAASb,IAAKF,KAAKO,MAAMC,UAAUG,KAAME,UAAWb,KAAKO,MAAMM,UAAUG,QACzE,kBAAC,EAAD,CAASd,IAAKF,KAAKO,MAAMC,UAAUI,KAAMC,UAAWb,KAAKO,MAAMM,UAAUI,a,GAzBnEb,IAAMC,W,iBCiBba,G,6KAZX,OACE,yBAAKC,UAAU,YACd,yBAAKtB,GAAG,cACN,yBAAKE,IAAKqB,IAAYvB,GAAG,mBAAmBM,IAAI,gBAElD,kBAAC,EAAD,W,GAZWC,IAAMC,YCMJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f24b830b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cardholderyellow.a505af5a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Tee Black.1ada824d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/DirtyCheeks.ee877a78.jpg\";","module.exports = __webpack_public_path__ + \"static/media/so79logo.604f7a00.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fulllogoinvert.7f83e9a0.jpg\";","import React from 'react';\nimport './NavLink.css';\n\n\nclass NavLink extends React.Component{\n\n    render(){\n        //There 4 of these in HomeNav.js; NOT 4 images BUT 4 of the entire html text below\n        //We have made #navigation 45% the width/height of the vh\n        //The css for HomeNav have flexwrapped these 4 parent #navigation elements to be in the correct position\n        return (\n            <div id=\"navgation\">\n                <div class=\"container\">\n                    <div id=\"overlay\">\n                        \n                    <img src={this.props.img} id=\"navimg\" alt=\"Click to enter\"></img>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NavLink","import React from 'react';\nimport './HomeNav.css';\nimport NavLink from './NavLink/NavLink';\nimport img1 from '../../src/cardholderyellow.jpg';\nimport img2 from '../../src/Tee Black.jpg';\nimport img3 from '../../src/DirtyCheeks.jpg';\nimport img4 from '../../src/so79logo.jpg';\n\nclass HomeNav extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            navimages : {\n                img1:img1,\n                img2:img2,\n                img3:img3,\n                img4:img4\n            },\n            animation:{\n                anim1:\"anim1\",\n                anim2:\"anim2\",\n                anim3:\"anim3\",\n                anim4:\"anim4\",\n            }\n        }\n    }\n\n    render(){\n        return (\n            <div id=\"nav-link-container\">\n                <NavLink img={this.state.navimages.img1} animation={this.state.animation.anim1}/>\n                <NavLink img={this.state.navimages.img2} animation={this.state.animation.anim2}/>\n                <NavLink img={this.state.navimages.img3} animation={this.state.animation.anim3}/>\n                <NavLink img={this.state.navimages.img4} animation={this.state.animation.anim4}/>\n            </div>\n        )\n    }\n}\n\nexport default HomeNav","import React from 'react';\nimport HomeNav from './HomeNav/HomeNav'\nimport background from '../src/fulllogoinvert.jpg'\nimport './App.css';\n\n\nclass App extends React.Component{\n /* constructor(props){\n    super(props)\n\n  } */\n\n  render(){\n    return (\n      <div className=\"Homepage\">\n       <div id=\"background\">\n         <img src={background} id=\"background-image\" alt=\"background\"></img>\n       </div>\n       <HomeNav/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}